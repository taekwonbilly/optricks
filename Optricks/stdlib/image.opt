class primitive Image{
	(byte:r,byte:g,byte:b)[][] data;
	def Image(int w, int h){
#		this.data = (byte:r,byte:g,byte:b)[][](w, lambda int x: (byte:r, byte:g, byte:b)[](h, (0,0,0)));
		this.data = (byte:r,byte:g,byte:b)[][](w);
		for(int i=0; i<w; i++){
//			auto tmp = (byte:r,byte:g,byte:b)[](h);
//			for(int j=0; j<h; j++) tmp[]=(0,0,0);
//			this.data[]= tmp;
			this.data[]= (byte:r,byte:g,byte:b)[](h, (0,0,0));
		}
	}
	def auto :[](int a){
		return this.data[a];
	}
	def getWidth(){
		return this.data.length;
	}
	def getHeight(){
		return this.data[0].length;
	}
	def outputPPM(lang.c.string s){
		File f = File(s,'wb')
		this.outputPPM(f)
		f.close()
	}
	def outputPPM(File f){
		fprintf(f.f, "P6 %d %d\n", this.data.length, this.data[0].length);
		for(int i=0; i<this.data.length; i++)
		for(int j=0; j<this.data[0].length; j++){
			f.write(this.data[i,j].r)
			f.write(this.data[i,j].g)
			f.write(this.data[i,j].b)
		}
	}
	def outputBMP(lang.c.string s){
		File f = File(s,'wb')
		this.outputBMP(f)
		f.close()
	}
	def outputHTML(lang.c.string width=null, lang.c.string height=null){
		print("<img style='");
		if(width!=null) printf("width:%s;",width);
		if(height!=null) printf("height:%s;",height);
		print("' src='data:image/bmp;base64,")
		Base64File f = Base64File();
		auto w = this.getWidth();
		auto h = this.getHeight();

		// BM
		f.write(0x42);
		f.write(0x4D);

		auto size = 26+3*w*h
		// SIZE OF BMP
		f.write(lang.c.int(size & 0xff));
		f.write(lang.c.int((size >>>  8) & 0xff ));
		f.write(lang.c.int((size >>>  16) & 0xff ));
		f.write(lang.c.int((size >>>  24) & 0xff ));

		//DPI 3780
		//BI_RGB = 0

		// RESERVED (creator1)?
		f.write(0x00);
		f.write(0x00);

		// RESERVED (creator2)
		f.write(0x00);
		f.write(0x00);

		// offset of pixel data
		f.write(0x1A);
		f.write(0x00);
		f.write(0x00);
		f.write(0x00);


		//size of DIB header
		f.write(0x0C);
		f.write(0x00);
		f.write(0x00);
		f.write(0x00);
	
		//width unsigned 16bit

		f.write(lang.c.int(w & 0xff));
		f.write(lang.c.int((w >>> 8) & 0xff));
	
		//height unsigned 16 bit
		f.write(lang.c.int(h & 0xff));
		f.write(lang.c.int((h >>> 8) & 0xff));
	
		//number of color planes
		f.write(0x01);
		f.write(0x00);

		//bits per pixel
		f.write(0x18);
		f.write(0x00);

		//BGR bottom right to left
		for(int j=h-1; ;j--){
			int i;
			for(i=0; i<w; i++){
				f.write(lang.c.int(this.data[i,j].b,true))
				f.write(lang.c.int(this.data[i,j].g,true))
				f.write(lang.c.int(this.data[i,j].r,true))
			}
			//pad rows to multiple of 4 bytes
			i*=3;
			while(i%4 !=0){
				f.write(0);
				i++;
			}
			if(j==0) break;
		}
		f.close();
		print("'>");
	
	}
	def outputBMP(File f){
		auto w = this.getWidth();
		auto h = this.getHeight();

		// BM
		f.write(0x42);
		f.write(0x4D);

		auto size = 26+3*w*h
		// SIZE OF BMP
		f.write(lang.c.int(size & 0xff));
		f.write(lang.c.int((size >>>  8) & 0xff ));
		f.write(lang.c.int((size >>>  16) & 0xff ));
		f.write(lang.c.int((size >>>  24) & 0xff ));

		//DPI 3780
		//BI_RGB = 0

		// RESERVED (creator1)?
		f.write(0x00);
		f.write(0x00);

		// RESERVED (creator2)
		f.write(0x00);
		f.write(0x00);

		// offset of pixel data
		f.write(0x1A);
		f.write(0x00);
		f.write(0x00);
		f.write(0x00);


		//size of DIB header
		f.write(0x0C);
		f.write(0x00);
		f.write(0x00);
		f.write(0x00);
	
		//width unsigned 16bit

		f.write(lang.c.int(w & 0xff));
		f.write(lang.c.int((w >>> 8) & 0xff));
	
		//height unsigned 16 bit
		f.write(lang.c.int(h & 0xff));
		f.write(lang.c.int((h >>> 8) & 0xff));
	
		//number of color planes
		f.write(0x01);
		f.write(0x00);

		//bits per pixel
		f.write(0x18);
		f.write(0x00);

		//BGR bottom right to left
		for(int j=h-1; ;j--){
			int i;
			for(i=0; i<w; i++){
				f.write(lang.c.int(this.data[i,j].b,true))
				f.write(lang.c.int(this.data[i,j].g,true))
				f.write(lang.c.int(this.data[i,j].r,true))
			}
			//pad rows to multiple of 4 bytes
			i*=3;
			while(i%4 !=0){
				f.write(0);
				i++;
			}
			if(j==0) break;
		}
	
	}

}

def readHex(lang.c.string s, int i=int(inf)){
	auto f = File(s, 'rb');
	do{
		auto tmp = f.read();
		if(tmp==-1) break;
		else printf("%02x ", tmp);
		if(i==0) break;
		i--;
	}while(true);
	f.close();
}
