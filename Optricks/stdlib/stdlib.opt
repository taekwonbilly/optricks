import 'file.opt';
import 'thread.opt';
import 'unix.opt';
import "random.opt"
import 'image.opt'
//import "string.opt"

gen int range(int start=0,int stop,int step=1){
	if(step>0)
		for(int i = start; i<stop; i+=step)
			yield i;
	else
		for(int i = start; i>stop; i+=step)
			yield i;
}

gen int range(int end){
	for(int i = 0; i<end; i++) yield i;
}

/*
gen map(range{int} it, function{int,int} a){
	for i in it:
		yield a(i);
}
*/


gen double range(double start=0, double stop, double step=1){
	if(step>0)
		for(auto i = start; i<stop; i+=step)
			yield i;
	else
		for(auto i = start; i>stop; i+=step)
			yield i;
}

gen int range(double end){
	for(int i = 0; i<end; i++) yield i;
}

///*
def int min(int a,int b){
	return (a<b)?a:b;
}

extern double	tan		(double);
extern double	acos	(double);
extern double	asin	(double);
extern double	atan	(double);
extern double	atan2	(double, double);
extern double	cosh	(double);
extern double	sinh	(double);
extern double	acosh	(double);
extern double	asinh	(double);
extern double	atanh	(double);
extern double	frexp	(double);
extern double	ldexp	(double);
extern double	modf	(double, double&);
extern double	expm1	(double);
extern int 		ilogb	(double);
extern double 	log1p	(double);
extern double 	logb	(double);
extern double	scalbn	(double);
extern double	scalbln	(double);
extern double 	pow		(double, double);
extern double	cbrt	(double);
extern double	erf		(double);
extern double	erfc	(double);
extern double	tgamma	(double);
extern double	lgamma	(double);
extern double	lround	(double);
extern double	llround	(double);
extern double	lrint	(double);
extern double	llrint	(double);
extern double	remainder(double);
extern double	remquo	(double);

//extern void qsort(lang.c.pointer ar, lang.c.size_t num, lang.c.size_t r, lang.c.pointer a);

extern void exit(int i=0);
def void quit(int i=0){ return exit(i); }
      
def complex conjugate(complex a){
	a.imag*=-1;
	return a;
}

def complex exp(complex c){
	complex z = cos(c.imag) + sin(c.imag)*1j;
	return exp(c.real)*z
}

def int pow(int a, int b){
	if(b<0) return 0;
	elif(b==0) return 1;
	elif(b==1) return a;
	elif(b==2) return a*a;
	int tmp = b/2;
	auto tmpow = pow(a,tmp); //TODO allow recursive operators
	if(tmp*2==b){
		return tmpow*tmpow;
	} else return tmpow*tmpow*a;
}
//*/
/*
def double complex.angle(){
	return atan2(this.imag,this.real);
}*/
/*
def complex operator ** (complex a, double b){
	double mag = a.mag()**b;
	double angle = a.angle()*b;
	return complex(cos(angle)*mag,sin(angle)*mag);
}

// */
