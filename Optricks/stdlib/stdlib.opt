def void print(int i, bool b=true){
	(extern void printi(int i, bool b))(i,b);
}

def void test(){
	int x = 7
	if(rand()%2==0){
		print(int(3));
		print(x);
	}
}

//import "string.opt"

//import "file.opt";
extern int rand();
/*
gen int range(int start=0,int stop,int step=1){
	if(step>0)
		for(int i = start; i<stop; i+=step)
			yield i;
	else
		for(int i = start; i>stop; i+=step)
			yield i;
}

gen int range(int end){
	for(int i = 0; i<end; i++) yield i;
}
gen double range(double start=0, double stop, double step=1){
	if(step>0)
		for(auto i = start; i<stop; i+=step)
			yield i;
	else
		for(auto i = start; i>stop; i+=step)
			yield i;
}

gen int range(double end){
	for(int i = 0; i<end; i++) yield i;
}*/
  
def bool isNaN(double d){
	return !(d==d);
}

def int min(int a,int b){
	return (a<b)?a:b;
}

//auto hi="hello"
//def void print(string s='c'){}
double NaN = 0./0.;
double PI = 3.141592653589793;
double  E = 2.718281828459045;
/*def complex.complex(double a=0, double b=0){
  this.real = a
  this.imag = b
}*/

def void print(bool i, bool b=true){
	(extern void printb(bool i, bool b))(i,b);
}
def void print(byte i, bool b=true){
	(extern void printby(byte i, bool b))(i,b);
}
//	extern void putchar(char i);

/*def void print(c_string i, bool b=true){
	for a in i: putchar(a);
	if(b) putchar('\n');
}*/

//def void print(string i, bool b=true){
//	print(i._cstr,b);
//}

extern void printc(complex i, bool b=true);

def void print(complex i, bool b=true){
	printc(i,b);
}
def void print(double i, bool b=true){
	(extern void printd(double i, bool b))(i,b);
}
/*def void print(){
	putchar('\n');
}
def void print(char i, bool b=true){
	putchar(i);
	if(b) putchar('\n');
}*/
extern double	cos		(double a);
extern double	sin		(double a);
extern double	tan		(double a);
extern double	acos	(double a);
extern double	asin	(double a);
extern double	atan	(double a);
extern double	atan2	(double a, double b);
extern double	cosh	(double a);
extern double	sinh	(double a);
extern double	acosh	(double a);
extern double	asinh	(double a);
extern double	atanh	(double a);
extern double	exp		(double a);
extern double	frexp	(double a);
extern double	ldexp	(double a);
extern double	log		(double a);
extern double	log10	(double a);
extern double	modf	(double a);
extern double	exp2	(double a);
extern double	expm1	(double a);
extern int 		ilogb	(double a);
extern double 	log1p	(double a);
extern double 	log2	(double a);
extern double 	logb	(double a);
extern double	scalbn	(double	a);
extern double	scalbln	(double a);
extern double 	pow		(double a, double b);
extern double	sqrt	(double a);
extern double	cbrt	(double a);
extern double	erf		(double a);
extern double	erfc	(double a);
extern double	tgamma	(double a);
extern double	lgamma	(double a);
extern double	ceil	(double a);
extern double	floor	(double a);
extern double	fmod	(double a);
extern double 	trunc	(double a);
extern double	round	(double a);
extern double	lround	(double a);
extern double	llround	(double a);
extern double	rint	(double a);
extern double	lrint	(double a);
extern double	llrint	(double a);
extern double 	nearbyint(double a);
extern double	remainder(double a);
extern double	remquo	(double a);
extern void exit(int i=0);
def void quit(int i=0){ return exit(i); }
      
def complex conjugate(complex a){
	a.imag*=-1;
	return a;
}
/*
def bool operator==(complex a, double b){
	if(a.imag!=0) return false;
	return a.real==b;
}
def bool operator==(double b, complex a){
	if(a.imag!=0) return false;
	return a.real==b;
}
def bool operator==(complex a, complex b){
	if(a.imag!=b.imag) return false;
	return a.real==b.real;
}
*/
def complex exp(complex c){
	complex z = cos(c.imag) + sin(c.imag)*1j;
	return exp(c.real)*z
}
def complex cos(complex z){
	return .5*(exp(1j*z)+exp(-1j*z));
}
/*
def int operator ** (int a, int b){
	return pow(a, b);
};
*/
def int pow(int a, int b){
	if(b<0) return 0;
	elif(b==0) return 1;
	elif(b==1) return a;
	elif(b==2) return a*a;
	int tmp = b/2;
	auto tmpow = pow(a,tmp); //TODO allow recursive operators
	if(tmp*2==b){
		return tmpow*tmpow;
	} else return tmpow*tmpow*a;
}


//def complex pow(complex a, int b){
//	return a**b;
//}
/*
def double operator ** (double a, double b){
	return pow(a, b);
}
*/

/*def double complex.mag2( ) {
	return this.real*this.real+this.imag*this.imag;
}*/
def int abs(int a){
	return (a<0)?(-a):a;
}
def double abs(double a){
	return (a<0)?(-a):a;
}
def double abs(complex z){
	return sqrt(z.real*z.real+z.imag*z.imag);
}
/*def double complex.mag(){
	return sqrt(this.real*this.real+this.imag*this.imag);
}
def double complex.angle(){
	return atan2(this.imag,this.real);
}*/
/*
def complex operator ** (complex a, double b){
	double mag = a.mag()**b;
	double angle = a.angle()*b;
	return complex(cos(angle)*mag,sin(angle)*mag);
}

def double double.print(bool newline=true){
	print(this,newline);
	return this;
}*/
// */
